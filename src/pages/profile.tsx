import Navbar from "@Fragments/Navbar";
import Head from "next/head";
import * as React from "react";
import Button, { ButtonStyle } from "@Elements/Button";
import { useRouter } from "next/router";
import { signOut, useSession } from "next-auth/react";
import ReactLoading from "react-loading";
import UserService from "@/services/user";
import Label from "@/components/Elements/Label";
import Input from "@/components/Elements/Input";
import { User } from "@prisma/client";
import {
  CheckCircleIcon,
  ExclamationTriangleIcon,
} from "@heroicons/react/24/outline";
import { toast } from "react-toastify";
import { GetServerSidePropsContext } from "next";
import { getServerSession } from "next-auth";
import { authOptions } from "./api/auth/[...nextauth]";

export default function Profile() {
  const router = useRouter();
  const [isEdit, setIsEdit] = React.useState(false);
  const { status } = useSession();
  const [user, setUser] = React.useState<User>();
  const [form, setForm] = React.useState({
    name: "",
    email: "",
    education: "",
    major: "",
  });
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  React.useEffect(() => {
    if (status === "authenticated") {
      UserService.get().then((response) => {
        const data = response.data.data;
        setUser(data);
        setForm({
          name: data?.name ?? "",
          email: data?.email ?? "",
          education: data?.education ?? "",
          major: data?.major ?? "",
        });
      });
    }
  }, [status]);

  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    const name = e.target.name;
    setForm({ ...form, [name]: value });
  };

  const handleSubmit = async () => {
    if (isEdit) {
      setIsSubmitting(true);
      try {
        await UserService.update(form);
        toast.success("Data berhasil di ubah", {
          autoClose: 500,
          pauseOnHover: false,
        });
        return setIsEdit(false);
      } catch (error) {
        console.log(error);
      } finally {
        setIsSubmitting(false);
      }
    }
    setIsEdit(true);
  };

  if (status === "loading") {
    return (
      <div className="h-screen flex justify-center items-center w-full">
        <ReactLoading type="bars" className="w-20 h-20" color="#2563eb" />
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Profil Saya</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Navbar />
        <div className="px-[3%] md:px-[10%] w-full mt-5">
          <h1 className="text-gray-700 font-bold text-2xl">Akun saya</h1>
          <p className="text-sm text-gray-500">Lihat semua data anda di sini</p>
          <div className="flex justify-end">
            <Button
              onClick={() => signOut({ callbackUrl: "/" })}
              variant={"destructive"}
              className="h-9 text-xs"
            >
              Keluar akun
            </Button>
          </div>
          <form>
            <div className="space-y-3">
              {formAttributes.map((item, index) => {
                const values = Object.values(form);
                return (
                  <div key={item.name}>
                    <Label htmlFor={item.name}>{item.label}</Label>
                    <div key={item.name} className="relative">
                      <Input
                        disabled={
                          !isEdit ||
                          item.name === "name" ||
                          item.name === "email"
                        }
                        id={item.name}
                        name={item.name}
                        value={values[index]}
                        placeholder={item.placeholder}
                        onChange={handleOnChange}
                      />
                      {values[index].length > 0 && (
                        <CheckCircleIcon className="w-5 absolute text-green-500 right-2 top-1/2 -translate-y-1/2" />
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
            <div className="border border-blue-200 rounded-lg bg-blue-100 p-3 w-full flex items-start gap-2 mt-3">
              <ExclamationTriangleIcon className="text-blue-300 w-7 aspect-square shrink-0" />
              <div className="text-blue-400 text-sm ">
                <h2 className="font-medium">Peringatan</h2>
                <p className="xs">
                  Jika data kamu belum lengkap, segera lengkapi sekarang. Klik
                  tombol di bawah ini untuk melakukan itu
                </p>
              </div>
            </div>
            <div className="mt-3 mb-5">
              <Button
                disabled={isSubmitting}
                type="button"
                onClick={handleSubmit}
              >
                {isEdit ? <>Simpan perubahan</> : <> Edit profile</>}
              </Button>
              {isEdit && (
                <Button
                  type="button"
                  disabled={isSubmitting}
                  onClick={() => {
                    setIsEdit(false);
                    setForm({
                      name: user?.name ?? "",
                      email: user?.email ?? "",
                      education: user?.education ?? "",
                      major: user?.major ?? "",
                    });
                  }}
                  className="ml-1"
                  variant={"secondary"}
                >
                  Batalkan
                </Button>
              )}
            </div>
          </form>
        </div>
      </main>
    </>
  );
}

export const formAttributes = [
  {
    name: "name",
    label: "Nama lengkap",
    placeholder: "masukan nama lengkap",
  },
  {
    name: "email",
    label: "Alamat email",
    placeholder: "masukan alamat email",
  },
  {
    name: "education",
    label: "Pendidikan",
    placeholder: "masukan pendidikan terkhir",
  },
  {
    name: "major",
    label: "Jurusan",
    placeholder: "masukan jurusan",
  },
];

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getServerSession(context.req, context.res, authOptions);
  if (!session) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }
  return { props: {} };
}
