import Head from "next/head";
import { useRouter } from "next/router";
import * as React from "react";
import Navbar from "@Fragments/Navbar";
import vacancy from "../../services/vacancy.json";
import Button from "@Elements/Button";
import {
  ArrowLongRightIcon,
  ArrowTopRightOnSquareIcon,
  ExclamationTriangleIcon,
} from "@heroicons/react/24/outline";
import VacancyDetail from "@Fragments/Vacancy/VacancyDetail";
import ApplyForm from "@Fragments/Vacancy/ApplyForm";
import { useSession } from "next-auth/react";
import { toast } from "react-toastify";
import JobApplicationService from "@/services/job-application";
import { JobApplication, User } from "@prisma/client";
import ReactLoading from "react-loading";

export default function DetailJob() {
  const router = useRouter();
  const job = vacancy.jobs.find((item) => item.slug === router.query.slug);
  const title = job?.title ? `Lowongan - ${job.title}` : "Lowongan - Pekerjaan";
  const { data: session } = useSession();
  const [isApply, setIsApply] = React.useState(false);
  const [user, setUser] = React.useState<User>();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [isAlreadyApply, setIsAlreadyApply] = React.useState(false);
  const [isLoading, setIsLoading] = React.useState(true);

  React.useEffect(() => {
    if (session) {
      JobApplicationService.getAll().then((response) => {
        const data = response.data.data as JobApplication[];
        const value = data.filter(
          ({ jobVacancyId }) => jobVacancyId === job?.id
        );
        setIsAlreadyApply(value.length > 0);
        setIsLoading(false);
      });
    } else {
      setIsLoading(false);
    }
    return () => {};
  }, [session, job?.id]);

  const handleSubmitApplication = async () => {
    try {
      setIsSubmitting(true);
      await JobApplicationService.apply({
        userId: Number(user?.id),
        jobVacancyId: Number(job?.id),
      });
      toast.success("Lamaran terkirim", {
        autoClose: 800,
        pauseOnHover: false,
      });
      setTimeout(() => {
        setIsSubmitting(false);
        router.push("/lamaran");
      }, 1000);
    } catch (error) {
      toast.error("Maaf, terjadi kesalahan");
      setIsSubmitting(false);
    }
  };

  if (isLoading) {
    return (
      <div className="h-screen flex justify-center items-center w-full">
        <ReactLoading type="bars" className="w-20 h-20" color="#2563eb" />
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Navbar />
        <div className="bg-blue-600 text-white py-4 px-[3%] md:px-[10%]">
          <h1 className="font-bold text-xl">{job?.title}</h1>
          <p className="text-slate-200">{job?.type}</p>
        </div>
        <div className="px-[3%] md:px-[10%] mt-5 flex flex-col lg:flex-row lg:justify-between">
          {isApply ? (
            <ApplyForm dataUser={(user) => setUser(user)} />
          ) : (
            <VacancyDetail />
          )}
          <div className="mb-8">
            {isAlreadyApply && (
              <div className="border border-orange-200 rounded-lg bg-orange-100 p-3 w-full flex items-start gap-2 my-3 max-w-[400px]">
                <ExclamationTriangleIcon className="text-orange-300 w-7 aspect-square shrink-0" />
                <div className="text-orange-400 text-sm ">
                  <h2 className="font-medium">Informasi</h2>
                  <p className="xs">
                    Kamu sudah pernah melamar lowongan ini. Klik button di bawah
                    untuk melihatnya.
                  </p>
                </div>
              </div>
            )}
            {isApply ? (
              <div className="flex gap-2">
                <Button
                  disabled={isSubmitting}
                  variant={"primary"}
                  onClick={handleSubmitApplication}
                >
                  {isSubmitting ? <>loading...</> : <> Lamar Sekarang</>}
                  <ArrowTopRightOnSquareIcon className="w-5 aspect-square ml-2 stroke-[2.2px]" />
                </Button>
                <Button
                  disabled={isSubmitting}
                  variant={"secondary"}
                  onClick={() => {
                    setIsApply(false);
                  }}
                >
                  Batalkan
                </Button>
              </div>
            ) : isAlreadyApply ? (
              <Button
                onClick={() => {
                  if (session) {
                    return router.push("/lamaran");
                  }
                  toast.error("Silahkan login terlebih dahulu", {
                    pauseOnHover: false,
                  });
                }}
              >
                Lihat lamaran saya
                <ArrowLongRightIcon className="w-5 aspect-square ml-2.5 stroke-[2.1px]" />
              </Button>
            ) : (
              <Button
                onClick={() => {
                  if (session) {
                    return setIsApply(true);
                  }
                  toast.error("Silahkan login terlebih dahulu", {
                    pauseOnHover: false,
                  });
                }}
              >
                Halaman pendaftaran
                <ArrowLongRightIcon className="w-5 aspect-square ml-2.5 stroke-[2.1px]" />
              </Button>
            )}
          </div>
        </div>
      </main>
    </>
  );
}
